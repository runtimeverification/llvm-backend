#!/bin/bash
set -e

# This is configured generated code; shellcheck can't follow it properly
# shellcheck disable=SC1091
source "$(dirname "$0")/../lib/kllvm/scripts/utils.sh"

usage() {
  cat << HERE
Usage: $0 <definition.kore> <dt_dir> <object type> [options] [clang flags]
   or: $0                            pythonast     [options] [clang flags]
   or: $0 <interpreter.o>            <object type> [options] [clang flags]

Options:
  -h, --help                        Print this message and exit.
  -v, --verbose                     Print commands executed to stderr.
      --profile                     Print profiling information to stderr.
  --save-temps                      Do not delete temporary files on exit.
  --bindings-path                   Print the absolute path of the compiled Python bindings for
                                    the LLVM backend, then exit.
  --include-dir                     Print the absolute include path for the LLVM backend
                                    runtime and binding headers, then exit.
  --use-opt                         Use standalone LLVM opt to apply optimization passes
                                    to the generated LLVM IR for this definition.
  --emit-ir                         Emit LLVM IR at intermediate compilation steps, rather than
                                    directly generating an object file.
  --python PATH                     The path to a Python interpreter with Pybind installed. Only
                                    meaningful in "python" or "pythonast" mode.
  --python-output-dir PATH          Output directory to place automatically-named Python
                                    modules. Only meaningful in "python" or "pythonast"
                                    mode.
  --embed PATH NAME                 Embed additional information into shared library
                                    bindings. This is a low-level interface designed to
                                    be called from kompile. Only meaningful in "c" mode.
  -fno-omit-frame-pointer           Keep the frame pointer in compiled code for debugging purposes.
  --proof-hint-instrumentation      Enable instrumentation for generation of proof hints.
  --proof-hint-instrumentation-slow Enable instrumentation for generation of proof hints that
                                    contains debugging events that are not strictly required.
                                    Significantly slower than the less verbose version.
  --mutable-bytes                   Use the faster, unsound (mutable) semantics for objects of sort
                                    Bytes at run time, rather than the slower, sound
                                    (immutable) that are enabled by default.
  --hidden-visibility               Set the visibility of all global symbols in generated code to
                                    "hidden"
  --profile-matching                Instrument interpeter to emit a profile of time spent in
                                    top-level rule matching on stderr.
  --verify-ir                       Verify result of IR generation.
  -O[0123]                          Set the optimization level for code generation.

Any option not listed above will be passed through to clang; use '--' to
separate additional positional arguments to clang from those for $0.

Valid values for a KLLVM object type are:
  main:       a main function will be generated. The resulting executable has the
              signature "interpreter <input.kore> <depth> <output.kore>"

  library:    generate an interpreter with no main function linked.

  search:     as "main", but the resulting executable has collects all possible
              results at each rewrite step.

  static:     as "main", but do not link the resulting binary against the
              necessary shared libraries. This must be done manually later.

  python:     build a Python bindings module rather than a standalone executable.

  pythonast:  build a Python bindings module for the KORE AST structures only,
              without relying on a specific K definition.

  c:          build a C bindings module rather than a standalone executable.
HERE
}

print_bindings_path () {
  bin_dir="$(dirname "$0")"
  bindings_dir="$(realpath "$bin_dir/../lib/kllvm/python")"
  echo "$bindings_dir"
}

print_include_path () {
  bin_dir="$(dirname "$0")"
  include_dir="$(realpath "$bin_dir/../include")"
  echo "$include_dir"
}

llvm_major_version () {
  echo "@LLVM_PACKAGE_VERSION@" | cut -d'.' -f1
}

positional_args=()
reading_clang_args=false
codegen_flags=()
codegen_verify_flags=()
if [[ -z "${NIX_LLVM_KOMPILE_LIBS}" ]]; then
  kompile_clang_flags=()
else
  readarray -td " " kompile_clang_flags <<<"$NIX_LLVM_KOMPILE_LIBS "
  # <<< inserts a newline, which we want to delete. 
  # by adding a trailing space to the above, the last array element will be just '\n'
  # we then delete the trailing newline below
  unset 'kompile_clang_flags[-1]'
fi
clang_args=()
python_cmd=python3
python_output_dir=""
embedded_files=()
embedded_names=()
use_opt=false
emit_ir=false
verify_ir=false
frame_pointer=false

export verbose=false
export profile=false
save_temps=false

while [[ $# -gt 0 ]]; do
  if [ "$reading_clang_args" = true ]; then
    clang_args+=("$1")
    shift
    continue
  fi

  case $1 in
    -h|--help)
      usage
      exit 0
      ;;
    -v|--verbose)
      verbose=true
      kompile_clang_flags+=("-v")
      shift
      ;;
    --profile)
      profile=true
      kompile_clang_flags+=("--profile")
      shift
      ;;
    --save-temps)
      save_temps=true	    
      kompile_clang_flags+=("-save-temps")
      shift
      ;;
    --bindings-path)
      print_bindings_path
      exit 0
      ;;
    --include-dir)
      print_include_path
      exit 0
      ;;
    --use-opt)
      use_opt=true
      codegen_flags+=("--no-optimize")
      shift
      ;;
    --emit-ir)
      emit_ir=true
      shift
      ;;
    --python)
      python_cmd="$2"
      shift; shift
      ;;
    --python-output-dir)
      python_output_dir="$2"
      shift; shift
      ;;
    --embed)
      embedded_files+=("$2")
      embedded_names+=("$3")
      shift; shift; shift
      ;;
    -fno-omit-frame-pointer)
      kompile_clang_flags+=("$1")
      frame_pointer=true
      shift
      ;;
    --proof-hint-instrumentation)
      codegen_flags+=("--proof-hint-instrumentation")
      codegen_verify_flags+=("--proof-hint-instrumentation")
      shift
      ;;
    --proof-hint-instrumentation-slow)
      codegen_flags+=("--proof-hint-instrumentation-slow")
      codegen_verify_flags+=("--proof-hint-instrumentation-slow")
      shift
      ;;
    --mutable-bytes)
      codegen_flags+=("--mutable-bytes")
      codegen_verify_flags+=("--mutable-bytes")
      shift
      ;;
    --hidden-visibility)
      codegen_flags+=("--hidden-visibility")
      codegen_verify_flags+=("--hidden-visibility")
      kompile_clang_flags+=("--hidden-visibility")
      shift
      ;;
    --profile-matching)
      codegen_flags+=("--profile-matching")
      codegen_verify_flags+=("--profile-matching")
      shift
      ;;
    --verify-ir)
      verify_ir=true
      shift
      ;;
    -O*)
      codegen_flags+=("$1")
      kompile_clang_flags+=("$1")
      shift
      ;;
    --)
      reading_clang_args=true
      shift
      ;;
    -o)
      kompile_clang_flags+=("$1" "$2")
      shift; shift;
      ;;
    -*)
      kompile_clang_flags+=("$1")
      shift
      ;;
    *)
      positional_args+=("$1")
      shift
      ;;
  esac
done

if [[ "${#positional_args[@]}" -eq 1 && "${positional_args[0]}" != "pythonast" ]]; then
  usage
  exit 1
fi

if [[ "${#positional_args[@]}" -lt 1 || "${#positional_args[@]}" -gt 3 ]]; then
  usage
  exit 1
fi

if [[ "$profile" == "true" ]] && [[ "$verbose" == "false" ]]; then
  echo "[warning] llvm-kompile: --profile will only produce output with -v/--verbose" 1>&2
fi

if [[ "$emit_ir" == "false" ]]; then
  codegen_flags+=("--emit-object")
  if [[ "$frame_pointer" == "true" ]]; then
    codegen_flags+=("-fno-omit-frame-pointer")
    codegen_verify_flags+=("-fno-omit-frame-pointer")
  fi
else
  codegen_flags+=("--binary-ir")
fi

mod="$(mktemp tmp.XXXXXXXXXX)"
modtmp="$(mktemp tmp.XXXXXXXXXX)"
modopt_tmp="$(mktemp tmp.XXXXXXXXXX)"
tmpdir="$(mktemp -d tmp.XXXXXXXXXX)"
modopt="$modopt_tmp"
if [ "$save_temps" = false ]; then
  trap 'rm -rf "$mod" "$modtmp" "$modopt_tmp" "$tmpdir"' INT TERM EXIT
fi

definition="${positional_args[0]}"
compile="default"
case "$definition" in
  *.o)
    compile="object"
    ;;
  pythonast)
    compile="python_ast"
    ;;
  *)
    ;;
esac

if [[ "$compile" = "default" ]]; then
  dt_dir="${positional_args[1]}"
  main="${positional_args[2]}"

  # If we're compiling a bindings module rather than an interpreter, then we
  # prevent the compiled code from crashing the entire process by passing this
  # flag.
  if [[ "$main" = "c" ]] || [[ "$main" = "python" ]]; then
    codegen_flags+=("--safe-partial")
    codegen_verify_flags+=("--safe-partial")
  fi

  for arg in "${clang_args[@]}"; do
    case "$arg" in
      -g)
        codegen_flags+=("--debug")
        codegen_verify_flags+=("--debug")
        ;;
    esac
  done

  run "$(dirname "$0")"/llvm-kompile-codegen "${codegen_flags[@]}" \
    "$definition" "$dt_dir"/dt.yaml "$dt_dir" -o "$mod"

  if [[ "$verify_ir" == "true" ]]; then
    run "$(dirname "$0")"/llvm-kompile-codegen "${codegen_verify_flags[@]}" \
      "$definition" "$dt_dir"/dt.yaml "$dt_dir" -o "$modtmp" --no-optimize
    run @OPT@ -passes=verify "$modtmp" -o /dev/null
  fi

  if [[ "$use_opt" = "true" ]]; then
    if [ "$(llvm_major_version)" -ge "16" ]; then
      run @OPT@ -passes='mem2reg,tailcallelim' "$mod" -o "$modopt"
    else
      run @OPT@ -mem2reg -tailcallelim "$mod" -o "$modopt"
    fi
  else
    if [[ "$emit_ir" == "false" ]]; then
      modopt="${modopt}.o"
      rm "${modopt_tmp}"
      modopt_tmp="${modopt}"
    fi

    run mv "$mod" "$modopt"
  fi
elif [ "$compile" = "object" ]; then
  main="${positional_args[1]}"
  modopt="$definition"
elif [ "$compile" = "python_ast" ]; then
  main="python_ast"
  modopt=""
fi

if [[ "$main" =~ "python" ]]; then
  bin_dir=$(dirname "$0")
  src_dir=$(realpath "$bin_dir/../lib/kllvm/python_src")

  # Hook to allow Nix to patch this line easily
  extra_python_flags=()
  kompile_clang_flags+=("${extra_python_flags[@]}")

  if [[ "$compile" = "python_ast" ]]; then
    kompile_clang_flags+=("$src_dir/ast.cpp")
  else
    kompile_clang_flags+=("$src_dir/runtime.cpp")
  fi

  kompile_clang_flags+=("--python" "${python_cmd}")
fi

if [[ "$OSTYPE" != "darwin"* ]]; then
  kompile_clang_flags+=("-fuse-ld=lld")
fi

if [[ "${python_output_dir}" == "" ]]; then
  python_output_dir="$(dirname "${definition}")"
fi
kompile_clang_flags+=("--python-output-dir" "${python_output_dir}")

embed_length="${#embedded_files[@]}"
for (( idx = 0; idx < embed_length; idx++ )); do
  name="${embedded_names[$idx]}"
  file="${embedded_files[$idx]}"

  cp "$file" "$tmpdir/$name"
  (cd "$tmpdir"; xxd -i "$name" > "$name.cpp")

  kompile_clang_flags+=("$tmpdir/$name.cpp")
done

run "$(dirname "$0")"/llvm-kompile-clang          \
  "$modopt" "$main"                               \
  @LLVM_KOMPILE_LTO@ -fno-stack-protector         \
  "${kompile_clang_flags[@]}" "${clang_args[@]}"  \
