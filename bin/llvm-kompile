#!/bin/bash
set -e

if [ $# -lt 3 ]; then
  echo "Usage: $0 <definition.kore> <dt_dir> [main|library] <clang flags>"
  echo '"main" means that a main function will be generated that matches the signature "interpreter <input.kore> <depth> <output.kore>"'
  echo '"library" means that no main function is generated and must be passed via <clang flags>'
  exit 1
fi
mod="$(mktemp tmp.XXXXXXXXXX)"
modopt="$(mktemp tmp.XXXXXXXXXX)"
modcombined="$(mktemp tmp.XXXXXXXXXX)"
modcombinedopt="$(mktemp tmp.XXXXXXXXXX)"
trap "rm -rf $dt_dir $mod $modopt $modcombined $modcombinedopt" INT TERM EXIT
definition="$1"
shift
compile=true
case "$definition" in
  *.o)
    compile=false
    ;;
  *)
    ;;
esac

if $compile; then
  dt_dir="$1"
  main="$2"
  shift; shift
  debug=0
  for arg in "$@"; do
    case "$arg" in
      -g)
        debug=1
        ;;
      -O[0-3])
        opt_flags="$arg"
        ;;
      -O.)
        echo "$0: invalid optimization level"
        exit 1
        ;;
      *)
        ;;
    esac
  done

  # code generation
  "$(dirname "$0")"/llvm-kompile-codegen "$definition" "$dt_dir"/dt.yaml "$dt_dir" $debug > "$mod"

  # optimization
  @OPT@ -load "$(dirname "$0")"/../lib/kllvm/libLLVMPass.so -mem2reg -tailcallelim $opt_flags -mark-tail-calls-as-gc-leaf -rewrite-statepoints-for-gc -dce -emit-gc-layout-info "$mod" -o "$modopt"
  @LLVM_LINK@ "$modopt" "$(dirname "$0")"/../lib/kllvm/llvm/opaque/opaque.ll -o "$modcombined"
  @OPT@ "$modcombined" -always-inline -o "$modcombinedopt"
else
  main="$1"
  shift
  modopt="$definition"
fi
if [[ "$OSTYPE" != "darwin"* ]]; then
  flags=-fuse-ld=lld
fi
"$(dirname "$0")"/llvm-kompile-clang "$modcombinedopt" "$main" @LLVM_KOMPILE_LTO@ -fno-stack-protector $flags "$@"
