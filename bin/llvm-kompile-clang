#!/bin/bash -e

# This is configured generated code; shellcheck can't follow it properly
# shellcheck disable=SC1091
source "$(dirname "$0")/../lib/scripts/utils.sh"

# Set the printing depth for profiling and verbose execution information
export DEPTH=1

modopt="$1"
main="$2"
lto="$3"
shift; shift; shift
flags=()
llc_flags=()
llc_opt_flags="-O0"
link=true
export verbose=false
export profile=false
save_temps=false
output=false
output_file="definition.o"
compile=true
python_cmd=python3
python_output_dir="."

python_extension() {
  "$1" <<HERE
import sysconfig
print(sysconfig.get_config_var('EXT_SUFFIX'))
HERE
}

infer_library_name() {
  base_name="$(basename "$1")"
  dir_name="$(dirname "$1")"
  
  if [[ "$base_name" =~ \. ]]; then
    echo "$1"
  else
    if [[ "$(uname)" == "Darwin" ]]; then
      ext=".dylib"
    else
      ext=".so"
    fi

    echo "${dir_name}/${base_name}${ext}"
  fi
}

clangpp_args=("--std=c++17")
while [[ $# -gt 0 ]]; do
  if $output; then
    output=false
    output_file="$1"
  fi

  keep_arg=true
  case "$1" in
    -O[0-3])
      llc_opt_flags="$1"
      ;;
    -O.)
      echo "$0: invalid optimization level"
      exit 1
      ;;
    -fno-omit-frame-pointer)
      llc_flags+=("-frame-pointer=all")
      ;;
    -c)
      link=false
      ;;
    -v)
      verbose=true
      keep_arg=false
      shift
      ;;
    --profile)
      profile=true
      keep_arg=false
      shift
      ;;
    -save-temps)
      save_temps=true	    
      ;;
    -o)
      output=true
      ;;
    --python)
      keep_arg=false
      python_cmd="$2"
      shift; shift
      ;;
    --python-output-dir)
      keep_arg=false
      python_output_dir="$2";
      shift; shift;
      ;;
    *)
      ;;
  esac

  if [[ "$keep_arg" = "true" ]]; then
    clangpp_args+=("$1")
    shift
  fi
done

case "$modopt" in
  *.o)
    compile=false
    ;;
  *)
    ;;
esac

LIBDIR="$(dirname "$0")/../lib/kllvm/"
INCDIR="$(dirname "$0")/../include/"
BINDIR="$(dirname "$0")"

if [ "$main" = "main" ]; then
  MAINFILES="$LIBDIR"/llvm/main/main.ll
elif [ "$main" = "search" ]; then
  MAINFILES="$LIBDIR"/llvm/main/search.cpp
else
  MAINFILES=""
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  libraries=("-liconv" "-lncurses")
  flags=(
    "-L@BREW_PREFIX@/opt/libffi/lib"
    "-L@BREW_PREFIX@/lib"
    "-Wl,-u,_sort_table"
    "-I" "@BREW_PREFIX@/include"
  )
else
  libraries=("-ltinfo")
  flags=("-Wl,-u,sort_table")
fi

llc_flags+=("--relocation-model=pic")

tmpdir="$(mktemp -d tmp.XXXXXXXXXX)"
if ! $save_temps; then
  trap 'rm -rf "$tmpdir"' INT TERM EXIT
fi

# When building the Python AST module, there's no runtime and no main file, so
# we skip this entire step. The library code is just C++, so we can skip
# straight to invoking the C++ compiler.
if [ "$main" != "python_ast" ]; then
  if [ "$lto" = "lto" ]; then
    flags+=("-flto")
    files=("$LIBDIR"/llvm/*.ll)
    if ! $link; then
      mv "$modopt" "$output_file"
    fi
  else
    files=()
    if $compile; then
      modasm="$tmpdir/asm.o"
      if ! $link; then
        modasm="$output_file"
      fi
      run @LLC@ \
        "$modopt" -mtriple=@BACKEND_TARGET_TRIPLE@ \
        -filetype=obj "$llc_opt_flags" "${llc_flags[@]}" -o "$modasm"
      modopt="$modasm"
    fi
    if $link; then
      for file in "$LIBDIR"/llvm/*.ll; do
        tmp="$tmpdir/$(basename "$file").o"
        run @LLC@ \
          "$file" -mtriple=@BACKEND_TARGET_TRIPLE@ \
          -filetype=obj "$llc_opt_flags" "${llc_flags[@]}" -o "$tmp"
        files+=("$tmp")
      done
    fi
  fi
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  start_whole_archive="-force_load"
  end_whole_archive=""

  flags+=("-Wl,-flat_namespace" "-Wl,-undefined" "-Wl,dynamic_lookup")
else
  start_whole_archive="-Wl,--whole-archive"
  end_whole_archive="-Wl,--no-whole-archive"
fi

if [ "$main" = "static" ]; then
  all_libraries=()
elif [[ "$main" =~ "python" ]]; then
  # Don't link jemalloc when building a python library; it clashes with the
  # pymalloc implementation that Python expects you to use.
  all_libraries=("${libraries[@]}" "-lgmp" "-lgmpxx" "-lmpfr" "-lpthread" "-ldl" "-lffi")
  flags+=("-fPIC" "-shared" "-I${INCDIR}" "-fvisibility=hidden")

  read -r -a python_include_flags <<< "$("${python_cmd}" -m pybind11 --includes)"
  flags+=("${python_include_flags[@]}")

  if [ "$main" = "python" ]; then
    suffix="_runtime"
  else
    suffix=""
  fi

  # If we didn't pass a filename explicitly as output, then we enforce the
  # blessed filename format that Python can understand.
  if [ "$output_file" = "definition.o" ]; then
    flags+=("-o" "${python_output_dir}/_kllvm${suffix}$(python_extension "${python_cmd}")")
  fi
elif [ "$main" = "c" ]; then
  output_file="$(infer_library_name "$output_file")"

  # Avoid jemalloc for similar reasons as Python; we don't know who is loading
  # this library so don't want to impose it.
  all_libraries=("${libraries[@]}" "-lgmp" "-lgmpxx" "-lmpfr" "-lpthread" "-ldl" "-lffi")
  flags+=("-fPIC" "-shared" "$start_whole_archive" "$LIBDIR/libkllvmcruntime.a" "$end_whole_archive")
  clangpp_args+=("-o" "${output_file}")
else
  all_libraries=("${libraries[@]}" "-lgmp" "-lgmpxx" "-lmpfr" "-lpthread" "-ldl" "-lffi" "-ljemalloc")
fi

if $link; then
  run @CMAKE_CXX_COMPILER@ -Wno-override-module -Wno-return-type-c-linkage "$modopt" "${files[@]}" \
    "$LIBDIR"/libarithmetic.a \
    "$MAINFILES" \
    "$LIBDIR"/libutil.a \
    "$LIBDIR"/libstrings.a \
    "$LIBDIR"/libnumeric_strings.a \
    "$LIBDIR"/libio.a \
    "$LIBDIR"/libcollections.a \
    "$LIBDIR"/libParser.a \
    "$LIBDIR"/libAST.a \
    "$LIBDIR"/libBinaryKore.a \
    "$LIBDIR"/libKOREPrinter.a \
    "$LIBDIR"/liballoc.a \
    "$LIBDIR"/libcollect.a \
    "$LIBDIR"/libmeta.a \
    "$LIBDIR"/libjson.a \
    "${flags[@]}" \
    "${all_libraries[@]}" \
    -I "$(dirname "$0")"/../include/kllvm \
    "${clangpp_args[@]}"

  if [[ "$OSTYPE" == "darwin"* ]]; then
    dsym_path="${output_file}.dSYM"
    if [[ -d "$dsym_path" ]]; then
      python_path="$dsym_path/Contents/Resources/Python"
      mkdir -p "$python_path"

      script_name="$(basename "$output_file").py"
      cp "$LIBDIR/lldb/klldb.py" "$python_path/$script_name"
    fi
  fi
fi
