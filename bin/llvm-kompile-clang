#!/bin/bash -e
modopt="$1"
main="$2"
lto="$3"
shift; shift; shift
flags=()
llc_flags=()
llc_opt_flags="-O0"
link=true
verbose=false
save_temps=false
output=false
output_file="definition.o"
compile=true
for arg in "$@"; do
  if $output; then
    output=false
    output_file="$arg"
  fi
  case "$arg" in
    -O[0-3])
      llc_opt_flags="$arg"
      ;;
    -O.)
      echo "$0: invalid optimization level"
      exit 1
      ;;
    -fno-omit-frame-pointer)
      llc_flags+=("-frame-pointer=all")
      ;;
    -c)
      link=false
      ;;
    -v)
      verbose=true
      ;;
    -save-temps)
      save_temps=true	    
      ;;
    -o)
      output=true
      ;;
    *)
      ;;
  esac
done
case "$modopt" in
  *.o)
    compile=false
    ;;
  *)
    ;;
esac
LIBDIR="$(dirname "$0")"/../lib/kllvm/
if [ "$main" = "main" ]; then
  MAINFILES="$LIBDIR"/llvm/main/main.ll
elif [ "$main" = "search" ]; then
  MAINFILES="$LIBDIR"/llvm/main/search.cpp
else
  MAINFILES=""
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  libraries=("-liconv" "-lncurses")
  flags=(
    "-L@BREW_PREFIX@/opt/libffi/lib"
    "-L@BREW_PREFIX@/lib"
    "-Wl,-u,_sort_table"
    "-I" "@BREW_PREFIX@/include"
  )
else
  libraries=("-ltinfo")
  flags=("-Wl,-u,sort_table")
fi

llc_flags+=("--relocation-model=pic")

run () {
  if $verbose; then
    set -x
  fi
  "$@"
  { set +x; } 2>/dev/null
}

tmpdir="$(mktemp -d tmp.XXXXXXXXXX)"
if ! $save_temps; then
  trap 'rm -rf "$tmpdir"' INT TERM EXIT
fi

if [ "$lto" = "lto" ]; then
  flags+=("-flto" "-Wl,-mllvm,-tailcallopt")
  files=("$LIBDIR"/llvm/*.ll)
  if ! $link; then
    mv "$modopt" "$output_file"
  fi
else
  files=()
  if $compile; then
    modasm="$tmpdir/asm.o"
    if ! $link; then
      modasm="$output_file"
    fi
    run @LLC@ \
      -tailcallopt "$modopt" -mtriple=@BACKEND_TARGET_TRIPLE@ \
      -filetype=obj "$llc_opt_flags" "${llc_flags[@]}" -o "$modasm"
    modopt="$modasm"
  fi
  if $link; then
    for file in "$LIBDIR"/llvm/*.ll; do
      tmp="$tmpdir/$(basename "$file").o"
      run @LLC@ \
        -tailcallopt "$file" -mtriple=@BACKEND_TARGET_TRIPLE@ \
        -filetype=obj "$llc_opt_flags" "${llc_flags[@]}" -o "$tmp"
      files+=("$tmp")
    done
  fi
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  start_whole_archive="-force_load"
  end_whole_archive=""

  flags+=("-Wl,-flat_namespace" "-Wl,-undefined" "-Wl,dynamic_lookup")
else
  start_whole_archive="-Wl,--whole-archive"
  end_whole_archive="-Wl,--no-whole-archive"
fi

if [ "$main" = "static" ]; then
  all_libraries=()
elif [ "$main" = "python" ]; then
  # Don't link jemalloc when building a python library; it clashes with the
  # pymalloc implementation that Python expects you to use.
  all_libraries=("${libraries[@]}" "-lgmp" "-lmpfr" "-lpthread" "-ldl" "-lffi")
  flags+=("-fPIC" "-shared" "$start_whole_archive" "$LIBDIR/libkllvmruntime.a" "$end_whole_archive")

  # If we didn't pass a filename explicitly as output, then we enforce the
  # blessed filename format that Python can understand.
  if [ "$output_file" = "definition.o" ]; then
    flags+=("-o" "_kllvm_runtime$(python3-config --extension-suffix)")
  fi
else
  all_libraries=("${libraries[@]}" "-lgmp" "-lmpfr" "-lpthread" "-ldl" "-lffi" "-ljemalloc")
fi

if $link; then
run @CMAKE_CXX_COMPILER@ -Wno-override-module -Wno-return-type-c-linkage "$modopt" "${files[@]}" \
  "$LIBDIR"/libarithmetic.a \
  "$MAINFILES" \
  "$LIBDIR"/libutil.a \
  "$LIBDIR"/libstrings.a \
  "$LIBDIR"/libio.a \
  "$LIBDIR"/libcollections.a \
  "$LIBDIR"/libParser.a \
  "$LIBDIR"/libAST.a \
  "$LIBDIR"/libBinaryKore.a \
  "$LIBDIR"/libKOREPrinter.a \
  "$LIBDIR"/liballoc.a \
  "$LIBDIR"/libcollect.a \
  "$LIBDIR"/libmeta.a \
  "$LIBDIR"/libjson.a \
  "${flags[@]}" \
  "${all_libraries[@]}" \
  -I "$(dirname "$0")"/../include/kllvm \
  "$@"
fi
