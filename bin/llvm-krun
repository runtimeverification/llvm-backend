#!/bin/bash
set -e

params=()
pretty=()
output_file="$(mktemp tmp.out.XXXXXXXXXX)"
input_file="$(mktemp tmp.in.XXXXXXXXXX)"
expanded_input_file="$(mktemp tmp.in.XXXXXXXXXX)"
parser_file="$(mktemp tmp.parse.XXXXXXXXXX)"
trap 'rm -rf "$input_file" "$expanded_input_file" "$output_file" "$parser_file"' INT TERM EXIT
initializer="LblinitGeneratedTopCell{}"
dir=.
debug=
depth=-1
pretty_print=false
dryRun=false
expandMacros=true

print_usage () {
cat <<HERE
Usage: $0 -d DIR [-c NAME VALUE SORT TYPE]... [-o OUTPUT] [-p]
Invoke llvm backend without calling java krun frontend. Functionality for
parsing and unparsing is limited, and the user interface is lower level, but
overhead is dramatically reduced.

Mandatory arguments to long options are mandatory for short options too.

  -d, --directory DIR      DIR is the kompiled directory of the definition to
                           run
  -c NAME VALUE SORT TYPE  Specify configuration variable. NAME is the name
                           of the configuration variable without the '$'.
                           VALUE is the value of the configuration variable
                           (see below). SORT is the sort of the term passed
                           as the value. TYPE is one of:
                             * kore: VALUE is a literal kore string
                             * korefile: VALUE is a filename containing kore
                             * pretty: VALUE is parsed using a bison parser
                                       and is a literal string in concrete
                                       syntax
                             * prettyfile: VALUE is a filename containing
                                           concrete syntax, parsed like
                                           'pretty'
  -o, --output-file FILE   Write resulting configuration to FILE. Defaults to
                           standard output
  -p, --pretty-print       Pretty print output configuration. By default,
                           output is in kore syntax
      --debug              Use GDB to debug program
      --depth INT          Execute up to INT steps
  -i, --initializer INIT   Use INIT as the top cell initializer 
  -nm, --no-expand-macros  Don't expand macros in initial configuration
  -v, --verbose            Print commands executed to standazd error
      -save-temps          Do not delete temporary files on exit
  -h, --help               Display this help and exit
HERE
}

while [[ $# -gt 0 ]]
do
  arg="$1"
  case $arg in
    -c)
    name="$2"
    value="$3"
    var_name="params_$name"
    file_name="file_$name"
    pretty_name="pretty_$name"
    sort_name="sort_$name"
    params+=("$name")
    sort="$4"
    type="$5"
    printf -v "$sort_name" %s "$sort"
    case $type in
      kore)
      printf -v "$var_name" %s "$value"
      ;;
      korefile)
      printf -v "$file_name" %s "$value"
      ;;
      pretty)
      printf -v "$pretty_name" %s "$value"
      pretty+=("$name")
      ;;
      prettyfile)
      printf -v "$pretty_name" %s "$(cat "$value")"
      pretty+=("$name")
      ;;
    esac
    shift; shift; shift; shift; shift
    ;;

    -o|--output-file)
    real_output_file="$2"
    shift; shift
    ;;

    -p|--pretty-print)
    pretty_print=true
    shift
    ;;

    -i|--initializer)
    initializer="$2"
    shift; shift
    ;;

    -nm|--no-expand-macros)
    expandMacros=false
    shift;
    ;;

    -d|--directory)
    dir="$2"
    shift; shift
    ;;

    --debug)
    debug="gdb --args "
    shift;
    ;;

    --depth)
    depth="$2"
    shift; shift
    ;;

    -v|--verbose)
    verbose=1
    shift;
    ;;

    -save-temps)
    trap - INT TERM EXIT
    shift;
    ;;

    --dry-run)
    dryRun=true
    shift;
    ;;

    -h|--help)
    print_usage
    exit 0
    ;;

    *)
    print_usage
    exit 1
    ;;
  esac
done

for name in "${pretty[@]}"; do
  var_name="params_$name"
  pretty_name="pretty_$name"
  set +e
  (
  if [ -n "$verbose" ]; then
    set -x
  fi
  printf %s "${!pretty_name}" | "$dir/parser_$name" /dev/stdin > "$parser_file"
  )
  printf -v "$var_name" %s "$(cat "$parser_file")"
done

for name in "${params[@]}"; do
  sort_name="sort_$name"
  var_name="params_$name"
  file_name="file_$name"
  sort="${!sort_name}"
  case $sort in
    KItem)
    ;;
    *)
    if [ -z "${!file_name}" ]; then
      printf -v "$var_name" %s "inj{Sort$sort{}, SortKItem{}}(${!var_name})"
    else
      temp_file="$(mktemp tmp.interpolate.XXXXXXXXXX)"
      {
        echo "inj{Sort$sort{}, SortKItem{}}("
        cat "${!file_name}"
        echo ")"
      } >> "$temp_file"
      mv "$temp_file" "${!file_name}"
    fi
    ;;
  esac
done

echo "$initializer" >> "$input_file"

cat <<HERE >> "$input_file"
(
HERE

for param in "${params[@]}"; do
  cat <<HERE >> "$input_file"
Lbl'Unds'Map'Unds'{}(
HERE
done

if [ ${#params[@]} -ne 0 ]; then
  cat <<HERE >> "$input_file"
Lbl'Stop'Map{}()
HERE
fi

for param in "${params[@]}"; do
  {
    cat <<HERE
, Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}(
HERE
    echo -n '"$'
    echo -n "$param"
    echo '"'

    cat <<HERE
)),
HERE
  } >> "$input_file"

  var_name="params_$param"
  file_name="file_$param"

  if [ -z "${!file_name}" ]; then
    echo "${!var_name}" >> "$input_file"
  else
    cat "${!file_name}" >> "$input_file"
  fi

  cat <<HERE >> "$input_file"
))
HERE

done

cat <<HERE >> "$input_file"
)
HERE

if $expandMacros; then
  "$(dirname "$0")/kore-expand-macros" "$dir" "$input_file" > "$expanded_input_file"
else
  cp "$input_file" "$expanded_input_file"
fi

if $dryRun; then
  if [ -n "$real_output_file" ]; then
    cat "$expanded_input_file" > "$real_output_file"
  else
    cat "$expanded_input_file"
  fi
  exit 0
fi

set +e
(
if [ -n "$verbose" ]; then
  set -x
fi
$debug "$dir"/interpreter "$expanded_input_file" "$depth" "$output_file"
)
EXIT=$?
set -e

if [ -n "${real_output_file}" ]; then
  if $pretty_print; then
  set +e
  (
  if [ -n "$verbose" ]; then
    set -x
  fi
  "$(dirname "$0")/kprint" "$dir" "$output_file" > "$real_output_file"
  )
  else
    mv -f "$output_file" "$real_output_file"
  fi
elif $pretty_print; then
  set +e
  (
  if [ -n "$verbose" ]; then
    set -x
  fi
  "$(dirname "$0")/kprint" "$dir" "$output_file"
  )
else
  cat "$output_file"
fi

exit $EXIT
