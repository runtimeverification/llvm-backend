#!/bin/bash
set -e

params=()
pretty=()
output_file="$(mktemp tmp.out.XXXXXXXXXX)"
input_file="$(mktemp tmp.in.XXXXXXXXXX)"
expanded_input_file="$(mktemp tmp.in.XXXXXXXXXX)"
parser_file="$(mktemp tmp.parse.XXXXXXXXXX)"
temp_inputs=()

cleanup () {
  rm -rf "$input_file" "$expanded_input_file" "$output_file" "$parser_file"
  rm -rf "${temp_inputs[@]}"
}
trap 'cleanup' INT TERM EXIT

initializer="LblinitGeneratedTopCell{}"
dir=.
debug=
depth=-1
binary_input=false
binary_output=false
pretty_print=false
interpreter_flags=()
dryRun=false
expandMacros=true

convert_term="$(dirname "$0")/kore-convert --from=text --to=binary /dev/stdin -F"

print_usage () {
cat <<HERE
Usage: $0 -d DIR [-c NAME VALUE SORT TYPE]... [-o OUTPUT] [-p]
Invoke llvm backend without calling java krun frontend. Functionality for
parsing and unparsing is limited, and the user interface is lower level, but
overhead is dramatically reduced.

Mandatory arguments to long options are mandatory for short options too.

  -d, --directory DIR      DIR is the kompiled directory of the definition to
                           run
  -c NAME VALUE SORT TYPE  Specify configuration variable. NAME is the name
                           of the configuration variable without the '$'.
                           VALUE is the value of the configuration variable
                           (see below). SORT is the sort of the term passed
                           as the value. TYPE is one of:
                             * kore: VALUE is a literal kore string
                             * korefile: VALUE is a filename containing kore
                             * pretty: VALUE is parsed using a bison parser
                                       and is a literal string in concrete
                                       syntax
                             * prettyfile: VALUE is a filename containing
                                           concrete syntax, parsed like
                                           'pretty'
                             * binaryfile: VALUE is a filename containing a
                                           binary KORE term with a valid
                                           header.
  -o, --output-file FILE   Write resulting configuration to FILE. Defaults to
                           standard output
  -bi,--binary-input       Construct the input configuration using the binary
                           KORE format, rather than the textual syntax.
  -bo,--binary-output      Serialize the output configuration using the binary
                           KORE format, rather than the textual syntax;
  -p, --pretty-print       Pretty print output configuration. By default,
                           output is in kore syntax
      --debug              Use GDB to debug program
      --depth INT          Execute up to INT steps
  -i, --initializer INIT   Use INIT as the top cell initializer 
  -nm, --no-expand-macros  Don't expand macros in initial configuration
  -v, --verbose            Print commands executed to standard error
      -save-temps          Do not delete temporary files on exit
  -h, --help               Display this help and exit
HERE
}

while [[ $# -gt 0 ]]
do
  arg="$1"
  case $arg in
    -c)
    name="$2"
    value="$3"
    var_name="params_$name"
    file_name="file_$name"
    binary_file_name="binary_$name"
    pretty_name="pretty_$name"
    sort_name="sort_$name"
    params+=("$name")
    sort="$4"
    type="$5"
    printf -v "$sort_name" %s "$sort"
    case $type in
      kore)
      printf -v "$var_name" %s "$value"
      ;;
      korefile)
      printf -v "$file_name" %s "$value"
      ;;
      pretty)
      printf -v "$pretty_name" %s "$value"
      pretty+=("$name")
      ;;
      prettyfile)
      printf -v "$pretty_name" %s "$(cat "$value")"
      pretty+=("$name")
      ;;
      binaryfile)
      printf -v "$binary_file_name" %s "$value"
      ;;
    esac
    shift; shift; shift; shift; shift
    ;;

    -o|--output-file)
    real_output_file="$2"
    shift; shift
    ;;

    -bi|--binary-input)
    binary_input=true
    shift
    ;;

    -bo|--binary-output)
    binary_output=true
    shift
    ;;

    -p|--pretty-print)
    pretty_print=true
    shift
    ;;

    -i|--initializer)
    initializer="$2"
    shift; shift
    ;;

    -nm|--no-expand-macros)
    expandMacros=false
    shift;
    ;;

    -d|--directory)
    dir="$2"
    shift; shift
    ;;

    --debug)
    debug="gdb --args "
    shift;
    ;;

    --depth)
    depth="$2"
    shift; shift
    ;;

    -v|--verbose)
    verbose=1
    shift;
    ;;

    -save-temps)
    trap - INT TERM EXIT
    shift;
    ;;

    --dry-run)
    dryRun=true
    shift;
    ;;

    -h|--help)
    print_usage
    exit 0
    ;;

    *)
    print_usage
    exit 1
    ;;
  esac
done

if $binary_output; then
  interpreter_flags+=("--binary-output")
fi

for name in "${pretty[@]}"; do
  var_name="params_$name"
  pretty_name="pretty_$name"
  set +e
  (
  if [ -n "$verbose" ]; then
    set -x
  fi
  printf %s "${!pretty_name}" | "$dir/parser_$name" /dev/stdin > "$parser_file"
  )
  printf -v "$var_name" %s "$(cat "$parser_file")"
done

for name in "${params[@]}"; do
  sort_name="sort_$name"
  var_name="params_$name"
  file_name="file_$name"
  binary_file_name="binary_$name"
  sort="${!sort_name}"
  case $sort in
    KItem)
    ;;
    *)
    if [ -n "${!file_name}" ]; then
      temp_file="$(mktemp tmp.interpolate.XXXXXXXXXX)"
      temp_inputs+=("$temp_file")

      {
        echo "inj{Sort$sort{}, SortKItem{}}("
        cat "${!file_name}"
        echo ")"
      } >> "$temp_file"

      printf -v "$file_name" %s "$temp_file"
    elif [ -n "${!binary_file_name}" ]; then
      temp_file="$(mktemp tmp.binary.XXXXXXXXXX)"
      temp_inputs+=("$temp_file")

      {
        cat "${!binary_file_name}"
        echo "inj{Sort$sort{}, SortKItem{}}()" | $convert_term -ka
        "$(dirname "$0")/kore-arity" 1
      } >> "$temp_file"

      printf -v "$binary_file_name" %s "$temp_file"
    else
      printf -v "$var_name" %s "inj{Sort$sort{}, SortKItem{}}(${!var_name})"
    fi
    ;;
  esac
done

construct_text_input() {
  echo "$initializer" >> "$input_file"

  cat <<HERE >> "$input_file"
(
HERE

  for param in "${params[@]}"; do
    cat <<HERE >> "$input_file"
Lbl'Unds'Map'Unds'{}(
HERE
  done

  if [ ${#params[@]} -ne 0 ]; then
    cat <<HERE >> "$input_file"
Lbl'Stop'Map{}()
HERE
  fi

  for param in "${params[@]}"; do
    {
      cat <<HERE
, Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}(
HERE
      echo -n '"$'
      echo -n "$param"
      echo '"'

      cat <<HERE
)),
HERE
    } >> "$input_file"

    var_name="params_$param"
    file_name="file_$param"
    binary_file_name="binary_$param"

    if [ -n "${!file_name}" ]; then
      cat "${!file_name}" >> "$input_file"
    elif [ -n "${!binary_file_name}" ]; then
      "$(dirname "$0")/kore-convert" "${!binary_file_name}" >> "$input_file"
    else
      echo "${!var_name}" >> "$input_file"
    fi

    cat <<HERE >> "$input_file"
))
HERE

  done

  cat <<HERE >> "$input_file"
)
HERE
}

construct_binary_input()
{
  if [ ${#params[@]} -ne 0 ]; then
    echo "Lbl'Stop'Map{}()" | $convert_term >> "$input_file"
  fi

  for param in "${params[@]}"; do
    var_name="params_$param"
    file_name="file_$param"
    binary_file_name="binary_$param"

    echo "inj{SortKConfigVar{},SortKItem{}}(\dv{SortKConfigVar{}}(\"\$${param}\"))" \
      | $convert_term -k >> "$input_file"

    if [ -n "${!file_name}" ]; then
      cat "${!file_name}" | $convert_term -k >> "$input_file"
    elif [ -n "${!binary_file_name}" ]; then
      temp_file="$(mktemp tmp.concat.XXXXXXXXXX)"
      temp_inputs+=("$temp_file")

      "$(dirname "$0")/kore-strip" -k -i "${!binary_file_name}" -o "$temp_file"
      cat "$temp_file" >> "$input_file"
    else
      echo "${!var_name}" | $convert_term -k >> "$input_file"
    fi

    {
      echo "Lbl'UndsPipe'-'-GT-Unds'{}()" | $convert_term -ka
      "$(dirname "$0")/kore-arity" 2

      echo "Lbl'Unds'Map'Unds'{}()" | $convert_term -ka
      "$(dirname "$0")/kore-arity" 2
    } >> "$input_file"
  done

  echo "$initializer()" | $convert_term -ka >> "$input_file"
  "$(dirname "$0")/kore-arity" 1 >> "$input_file"
}

if $binary_input; then
  construct_binary_input
else
  construct_text_input
fi

if $expandMacros; then
  "$(dirname "$0")/kore-expand-macros" "$dir" "$input_file" > "$expanded_input_file"
else
  cp "$input_file" "$expanded_input_file"
fi

if $dryRun; then
  if [ -n "$real_output_file" ]; then
    cat "$expanded_input_file" > "$real_output_file"
  else
    cat "$expanded_input_file"
  fi
  exit 0
fi

set +e
(
if [ -n "$verbose" ]; then
  set -x
fi
$debug "$dir"/interpreter "$expanded_input_file" "$depth" "$output_file" "${interpreter_flags[@]}"
)
EXIT=$?
set -e

if [ -n "${real_output_file}" ]; then
  if $pretty_print; then
  set +e
  (
  if [ -n "$verbose" ]; then
    set -x
  fi
  "$(dirname "$0")/kprint" "$dir" "$output_file" > "$real_output_file"
  )
  else
    mv -f "$output_file" "$real_output_file"
  fi
elif $pretty_print; then
  set +e
  (
  if [ -n "$verbose" ]; then
    set -x
  fi
  "$(dirname "$0")/kprint" "$dir" "$output_file"
  )
else
  cat "$output_file"
fi

exit $EXIT
