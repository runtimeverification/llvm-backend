set(CMAKE_CXX_STANDARD          17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS        OFF)

# Required to build the Python bindings as a static library that is then linked
# into a shared library with the interpreter library generated by llvm-kompile.
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(K_LLVM_BACKEND_LTO "Enable LTO for the LLVM backend" ON)
if(K_LLVM_BACKEND_LTO)
  set(K_LLVM_BACKEND_LTO_FLAG "-flto")
else()
  set(K_LLVM_BACKEND_LTO_FLAG "")
endif()

add_definitions(-Wall -Werror -Wno-return-type-c-linkage)
if (CMAKE_BUILD_TYPE STREQUAL "GcStats")
  add_definitions(-DGC_DBG)
endif()
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-stack-protector")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-stack-protector")
set(CMAKE_C_FLAGS_FASTBUILD "${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_GCSTATS "${CMAKE_C_FLAGS_DEBUG}")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${K_LLVM_BACKEND_LTO_FLAG}")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} ${K_LLVM_BACKEND_LTO_FLAG} -fno-omit-frame-pointer")
set(CMAKE_CXX_FLAGS_FASTBUILD "${CMAKE_CXX_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_GCSTATS "${CMAKE_CXX_FLAGS_DEBUG}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${K_LLVM_BACKEND_LTO_FLAG}")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${K_LLVM_BACKEND_LTO_FLAG} -fno-omit-frame-pointer")
set(CMAKE_EXE_LINKER_FLAGS_FASTBUILD "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_EXE_LINKER_FLAGS_GCSTATS "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${K_LLVM_BACKEND_LTO_FLAG}")
set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${K_LLVM_BACKEND_LTO_FLAG}")

set(CMAKE_AR "${CMAKE_C_COMPILER_AR}")
set(CMAKE_RANLIB "${CMAKE_C_COMPILER_RANLIB}")

include_directories(${LLVM_INCLUDE_DIRS})
include_directories(${PROJECT_SOURCE_DIR}/include)

# Auto-generated header path
set(KLLVM_AUTOGEN_INCLUDE_DIR ${CMAKE_BINARY_DIR}/include)
include_directories(${KLLVM_AUTOGEN_INCLUDE_DIR})
