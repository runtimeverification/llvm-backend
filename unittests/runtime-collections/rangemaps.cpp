#include <boost/test/unit_test.hpp>

#include <runtime/collections/rangemap.h>

BOOST_AUTO_TEST_SUITE(RangeMapTest)

BOOST_AUTO_TEST_CASE(rangemap_test_empty) {
  auto map = RangeMap<int, int>();
  auto result = map.size();
  BOOST_CHECK_EQUAL(result, 0);
  auto result2 = map.containsKey(0);
  BOOST_CHECK_EQUAL(result2, false);
}

BOOST_AUTO_TEST_CASE(rangemap_test_concat_success) {
  auto m = (RangeMap<int, int>()).inserted(std::make_pair(2, 4), 1);
  auto map1 = m.inserted(std::make_pair(6, 7), 1);
  auto m1 = (RangeMap<int, int>()).inserted(std::make_pair(0, 2), 2);
  auto m2 = m1.inserted(std::make_pair(4, 6), 3);
  auto map2 = m2.inserted(std::make_pair(8, 9), 4);
  auto map3 = concat(map1, map2);
  auto result = map3.size();
  BOOST_CHECK_EQUAL(result, 5);
  auto map4 = (RangeMap<int, int>()).inserted(std::make_pair(4, 6), 1);
  auto map5 = concat(map1, map4);
  result = map5.size();
  BOOST_CHECK_EQUAL(result, 1);
}

BOOST_AUTO_TEST_CASE(rangemap_test_concat_failure) {
  auto m = (RangeMap<int, int>()).inserted(std::make_pair(2, 4), 1);
  auto map1 = m.inserted(std::make_pair(6, 7), 2);
  auto m1 = (RangeMap<int, int>()).inserted(std::make_pair(0, 3), 2);
  auto map2 = m1.inserted(std::make_pair(8, 9), 4);
  BOOST_CHECK_THROW(concat(map1, map2), std::invalid_argument);
  auto map3 = (RangeMap<int, int>()).inserted(std::make_pair(3, 6), 2);
  BOOST_CHECK_THROW(concat(map1, map3), std::invalid_argument);
  auto map4 = (RangeMap<int, int>()).inserted(std::make_pair(5, 8), 2);
  BOOST_CHECK_THROW(concat(map1, map4), std::invalid_argument);
}

BOOST_AUTO_TEST_CASE(rangemap_test_contains_key) {
  auto m1 = (RangeMap<int, int>()).inserted(std::make_pair(0, 5), 1);
  auto m2 = m1.inserted(std::make_pair(2, 4), 2);
  auto map = m2.deleted(std::make_pair(3, 4));
  auto result = map.size();
  BOOST_CHECK_EQUAL(result, 3);
  auto result2 = map.containsKey(0);
  BOOST_CHECK_EQUAL(result2, true);
  result2 = map.containsKey(2);
  BOOST_CHECK_EQUAL(result2, true);
  result2 = map.containsKey(3);
  BOOST_CHECK_EQUAL(result2, false);
  result2 = map.containsKey(4);
  BOOST_CHECK_EQUAL(result2, true);
  result2 = map.containsKey(5);
  BOOST_CHECK_EQUAL(result2, false);
  result2 = map.containsKey(6);
  BOOST_CHECK_EQUAL(result2, false);
}

BOOST_AUTO_TEST_CASE(rangemap_test_vlookup) {
  auto m1 = (RangeMap<int, int>()).inserted(std::make_pair(0, 5), 1);
  auto m2 = m1.inserted(std::make_pair(2, 4), 2);
  auto map = m2.deleted(std::make_pair(3, 4));
  auto result = map.size();
  BOOST_CHECK_EQUAL(result, 3);
  auto result2 = map.getValue(0);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value(), 1);
  result2 = map.getValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value(), 2);
  result2 = map.getValue(3);
  BOOST_CHECK_EQUAL(result2.has_value(), false);
  result2 = map.getValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value(), 1);
  result2 = map.getValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), false);
  result2 = map.getValue(6);
  BOOST_CHECK_EQUAL(result2.has_value(), false);
}

BOOST_AUTO_TEST_CASE(rangemap_test_kvlookup) {
  auto m1 = (RangeMap<int, int>()).inserted(std::make_pair(0, 5), 1);
  auto m2 = m1.inserted(std::make_pair(2, 4), 2);
  auto map = m2.deleted(std::make_pair(3, 4));
  auto result = map.size();
  BOOST_CHECK_EQUAL(result, 3);
  auto result2 = map.getKeyValue(0);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 2);
  result2 = map.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 2);
  BOOST_CHECK_EQUAL(result2.value().first.second, 3);
  result2 = map.getKeyValue(3);
  BOOST_CHECK_EQUAL(result2.has_value(), false);
  result2 = map.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 4);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  result2 = map.getKeyValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), false);
  result2 = map.getKeyValue(6);
  BOOST_CHECK_EQUAL(result2.has_value(), false);
}

BOOST_AUTO_TEST_CASE(rangemap_test_ins_1) {
  auto map = (RangeMap<int, int>()).inserted(std::make_pair(0, 5), 1);
  auto result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  auto map2 = map.inserted(std::make_pair(2, 4), 2);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map2.size();
  BOOST_CHECK_EQUAL(result, 3);
  auto result2 = map.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  result2 = map2.getKeyValue(0);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 2);
  result2 = map2.getKeyValue(1);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 2);
  result2 = map2.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 2);
  BOOST_CHECK_EQUAL(result2.value().first.second, 4);
  result2 = map2.getKeyValue(3);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 2);
  BOOST_CHECK_EQUAL(result2.value().first.second, 4);
  result2 = map2.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 4);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  result2 = map2.getKeyValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), false);
}

BOOST_AUTO_TEST_CASE(rangemap_test_ins_2) {
  auto map = (RangeMap<int, int>()).inserted(std::make_pair(2, 5), 1);
  auto result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  auto map2 = map.inserted(std::make_pair(4, 7), 2);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map2.size();
  BOOST_CHECK_EQUAL(result, 2);
  auto result2 = map2.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 4);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
  result2 = map2.getKeyValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 4);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
  auto map3 = map.inserted(std::make_pair(5, 7), 2);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map3.size();
  BOOST_CHECK_EQUAL(result, 2);
  result2 = map3.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 2);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  result2 = map3.getKeyValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 5);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
  auto map4 = map.inserted(std::make_pair(4, 7), 1);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map4.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map4.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 2);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
  result2 = map4.getKeyValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 2);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
  auto map5 = map.inserted(std::make_pair(5, 7), 1);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map5.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map5.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 2);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
  result2 = map5.getKeyValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 2);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
  auto map6 = map.inserted(std::make_pair(0, 3), 2);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map6.size();
  BOOST_CHECK_EQUAL(result, 2);
  result2 = map6.getKeyValue(1);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 3);
  result2 = map6.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 3);
  auto map7 = map.inserted(std::make_pair(0, 2), 2);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map7.size();
  BOOST_CHECK_EQUAL(result, 2);
  result2 = map7.getKeyValue(1);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 2);
  result2 = map7.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 2);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  auto map8 = map.inserted(std::make_pair(0, 3), 1);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map8.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map8.getKeyValue(1);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  result2 = map8.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  auto map9 = map.inserted(std::make_pair(0, 2), 1);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map9.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map9.getKeyValue(1);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  result2 = map9.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  auto map10 = map.inserted(std::make_pair(1, 7), 2);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map10.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map10.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 1);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
  result2 = map10.getKeyValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 1);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
  auto map11 = map.inserted(std::make_pair(1, 7), 1);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 1);
  result = map11.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map11.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 1);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
  result2 = map11.getKeyValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 1);
  BOOST_CHECK_EQUAL(result2.value().first.second, 7);
}

BOOST_AUTO_TEST_CASE(rangemap_test_ins_3) {
  auto m1 = (RangeMap<int, int>()).inserted(std::make_pair(0, 5), 1);
  auto result = m1.size();
  BOOST_CHECK_EQUAL(result, 1);
  auto map = m1.inserted(std::make_pair(10, 15), 1);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 2);
  auto map2 = map.inserted(std::make_pair(5, 10), 1);
  result = map2.size();
  BOOST_CHECK_EQUAL(result, 1);
  auto result2 = map2.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 15);
  auto result3 = map2.getValue(5);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  result3 = map2.getValue(10);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  result3 = map2.getValue(11);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  auto map3 = map.inserted(std::make_pair(4, 10), 1);
  result = map3.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map3.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 15);
  result3 = map3.getValue(5);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  result3 = map3.getValue(10);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  result3 = map3.getValue(11);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  auto map4 = map.inserted(std::make_pair(5, 11), 1);
  result = map4.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map4.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 15);
  result3 = map4.getValue(5);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  result3 = map4.getValue(10);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  result3 = map4.getValue(11);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  auto map5 = map.inserted(std::make_pair(4, 11), 1);
  result = map5.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map5.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 15);
  result3 = map5.getValue(5);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  result3 = map5.getValue(10);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  result3 = map5.getValue(11);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  auto map6 = map.inserted(std::make_pair(5, 10), 2);
  result = map6.size();
  BOOST_CHECK_EQUAL(result, 3);
  result2 = map6.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  result2 = map6.getKeyValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 5);
  BOOST_CHECK_EQUAL(result2.value().first.second, 10);
  result2 = map6.getKeyValue(10);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 10);
  BOOST_CHECK_EQUAL(result2.value().first.second, 15);
  result3 = map6.getValue(11);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  auto map7 = map.inserted(std::make_pair(4, 10), 2);
  result = map7.size();
  BOOST_CHECK_EQUAL(result, 3);
  result2 = map7.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 4);
  BOOST_CHECK_EQUAL(result2.value().first.second, 10);
  result3 = map7.getValue(5);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 2);
  result2 = map7.getKeyValue(10);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 10);
  BOOST_CHECK_EQUAL(result2.value().first.second, 15);
  result3 = map7.getValue(11);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 1);
  auto map8 = map.inserted(std::make_pair(5, 11), 2);
  result = map8.size();
  BOOST_CHECK_EQUAL(result, 3);
  result2 = map8.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 5);
  result2 = map8.getKeyValue(5);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 5);
  BOOST_CHECK_EQUAL(result2.value().first.second, 11);
  result3 = map8.getValue(10);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 2);
  result2 = map8.getKeyValue(11);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 11);
  BOOST_CHECK_EQUAL(result2.value().first.second, 15);
  auto map9 = map.inserted(std::make_pair(4, 11), 2);
  result = map9.size();
  BOOST_CHECK_EQUAL(result, 3);
  result2 = map9.getKeyValue(4);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 4);
  BOOST_CHECK_EQUAL(result2.value().first.second, 11);
  result3 = map9.getValue(5);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 2);
  result3 = map9.getValue(10);
  BOOST_CHECK_EQUAL(result3.has_value(), true);
  BOOST_CHECK_EQUAL(result3.value(), 2);
  result2 = map9.getKeyValue(11);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 11);
  BOOST_CHECK_EQUAL(result2.value().first.second, 15);
}

BOOST_AUTO_TEST_CASE(rangemap_test_del) {
  auto m1 = (RangeMap<int, int>()).inserted(std::make_pair(0, 10), 1);
  auto result = m1.size();
  BOOST_CHECK_EQUAL(result, 1);
  auto map = m1.inserted(std::make_pair(5, 10), 2);
  result = map.size();
  BOOST_CHECK_EQUAL(result, 2);
  auto map2 = map.deleted(std::make_pair(4, 6));
  result = map2.size();
  BOOST_CHECK_EQUAL(result, 2);
  auto result2 = map2.getKeyValue(3);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 4);
  auto result3 = map2.containsKey(4);
  BOOST_CHECK_EQUAL(result3, false);
  result3 = map2.containsKey(5);
  BOOST_CHECK_EQUAL(result3, false);
  result2 = map2.getKeyValue(6);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 6);
  BOOST_CHECK_EQUAL(result2.value().first.second, 10);
  auto map3 = map2.deleted(std::make_pair(8, 9));
  result = map3.size();
  BOOST_CHECK_EQUAL(result, 3);
  result2 = map3.getKeyValue(7);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 6);
  BOOST_CHECK_EQUAL(result2.value().first.second, 8);
  result3 = map3.containsKey(8);
  BOOST_CHECK_EQUAL(result3, false);
  result2 = map3.getKeyValue(9);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 9);
  BOOST_CHECK_EQUAL(result2.value().first.second, 10);
  auto map4 = map3.deleted(std::make_pair(3, 10));
  result = map4.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map4.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 3);
  result3 = map4.containsKey(3);
  BOOST_CHECK_EQUAL(result3, false);
  auto map5 = map4.deleted(std::make_pair(5, 7));
  result = map5.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map5.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 3);
  auto map6 = map2.deleted(std::make_pair(3, 10));
  result = map6.size();
  BOOST_CHECK_EQUAL(result, 1);
  result2 = map6.getKeyValue(2);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 3);
  result3 = map6.containsKey(3);
  BOOST_CHECK_EQUAL(result3, false);
  auto map7 = map2.deleted(std::make_pair(5, 7));
  result = map7.size();
  BOOST_CHECK_EQUAL(result, 2);
  result2 = map7.getKeyValue(3);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 4);
  result3 = map7.containsKey(6);
  BOOST_CHECK_EQUAL(result3, false);
  result2 = map7.getKeyValue(7);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 7);
  BOOST_CHECK_EQUAL(result2.value().first.second, 10);
  auto map8 = map3.deleted(std::make_pair(4, 9));
  result = map8.size();
  BOOST_CHECK_EQUAL(result, 2);
  result2 = map8.getKeyValue(3);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 1);
  BOOST_CHECK_EQUAL(result2.value().first.first, 0);
  BOOST_CHECK_EQUAL(result2.value().first.second, 4);
  result3 = map8.containsKey(6);
  BOOST_CHECK_EQUAL(result3, false);
  result3 = map8.containsKey(7);
  BOOST_CHECK_EQUAL(result3, false);
  result2 = map8.getKeyValue(9);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value().second, 2);
  BOOST_CHECK_EQUAL(result2.value().first.first, 9);
  BOOST_CHECK_EQUAL(result2.value().first.second, 10);
}

BOOST_AUTO_TEST_CASE(rangemap_test_constr_mult) {
  auto v
      = {std::pair<std::pair<int, int>, int>(std::pair<int, int>(0, 2), 1),
         std::pair<std::pair<int, int>, int>(std::pair<int, int>(1, 3), 2)};
  auto map = RangeMap<int, int>(v.begin(), v.end());
  auto result = map.size();
  BOOST_CHECK_EQUAL(result, 2);
  auto result2 = map.getValue(1);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value(), 2);
}

BOOST_AUTO_TEST_CASE(rangemap_test_ins_mult) {
  auto v
      = {std::pair<std::pair<int, int>, int>(std::pair<int, int>(0, 2), 1),
         std::pair<std::pair<int, int>, int>(std::pair<int, int>(1, 3), 2)};
  auto m1 = RangeMap<int, int>();
  auto map = inserted(m1, v.begin(), v.end());
  auto result = map.size();
  BOOST_CHECK_EQUAL(result, 2);
  auto result2 = map.getValue(1);
  BOOST_CHECK_EQUAL(result2.has_value(), true);
  BOOST_CHECK_EQUAL(result2.value(), 2);
}

BOOST_AUTO_TEST_SUITE_END()
